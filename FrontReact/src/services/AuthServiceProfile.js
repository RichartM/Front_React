import axios from "axios";
import AuthServiceLogin from "./AuthServiceLogin";

const API_URL = "http://localhost:8080/api/auth/";

const AuthServiceProfile = {
  // üìå Obtener el perfil seg√∫n el rol del usuario
  getUserProfile: async () => {
    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("Token no encontrado en localStorage");

      const role = AuthServiceLogin.getRoleFromToken();
      if (!role) {
        console.error("‚ùå No se pudo obtener el rol del usuario.");
        throw new Error("No se pudo determinar el rol del usuario.");
      }

      // üîπ Determinar el endpoint seg√∫n el rol
      let endpoint = role === "GERENTE" ? "perfilGerente" : role === "AGENTE" ? "perfilAgente" : "perfilCliente";

      console.log(`üîπ Obteniendo perfil desde: ${API_URL}${endpoint}`);

      const response = await axios.get(`${API_URL}${endpoint}`, { 
        headers: { Authorization: `Bearer ${token}` }
      });

      return response.data;
    } catch (error) {
      console.error("‚ùå Error en la petici√≥n:", error.response?.status, error.response?.data);

      if (error.response?.status === 401) {
        console.warn("‚ö† Token inv√°lido o expirado.");
        throw new Error("Token expirado o inv√°lido.");
      }

      throw error.response?.data || "Error al obtener el perfil.";
    }
  },

  updateUserProfile: async (updatedData) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("Token no encontrado en localStorage");

      const role = AuthServiceLogin.getRoleFromToken();
      if (!role) throw new Error("No se pudo determinar el rol del usuario.");

      // üîπ Determinar el endpoint correcto
      let endpoint = role === "GERENTE" ? "perfilGerente" : role === "AGENTE" ? "perfilAgente" : "perfilCliente";

      console.log(`üîπ Enviando actualizaci√≥n a: ${API_URL}${endpoint}`);
      console.log("üîπ Datos enviados:", updatedData);

      if (!updatedData.currentPassword) {
        throw new Error("Debes ingresar tu contrase√±a actual para actualizar el perfil.");
      }

      const response = await axios.put(`${API_URL}${endpoint}`, updatedData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      console.log("‚úÖ Perfil actualizado:", response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå Error al actualizar perfil:", error.response?.status, error.response?.data);

      if (error.response?.status === 401) {
        console.warn("‚ö† Token inv√°lido o expirado.");
        throw new Error("Token expirado o inv√°lido.");
      }

      throw error.response?.data || "Error al actualizar el perfil.";
    }
  },

  // üìå Cambiar la contrase√±a despu√©s del login obligatorio
  changePassword: async (currentPassword, newPassword) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("No est√°s autenticado.");
      if (!currentPassword || !newPassword) throw new Error("Debes proporcionar tu contrase√±a actual y la nueva contrase√±a.");

      const response = await axios.put(
        `${API_URL}change-password`,
        { currentPassword, newPassword },
        { headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" } }
      );

      console.log("‚úÖ Contrase√±a cambiada correctamente:", response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå Error al cambiar la contrase√±a:", error.response?.data || error.message);
      throw error.response?.data || "No se pudo cambiar la contrase√±a.";
    }
  },

  // üìå Solicitar restablecimiento de contrase√±a (recuperaci√≥n por correo)
  requestPasswordReset: async (email) => {
    try {
      const response = await axios.post(`${API_URL}forgot-password`, { email });
      console.log("‚úÖ Solicitud de recuperaci√≥n enviada:", response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå Error en la solicitud de recuperaci√≥n:", error.response?.data || error.message);
      throw error.response?.data || "Error al solicitar recuperaci√≥n de contrase√±a.";
    }
  },

  // üìå Restablecer la contrase√±a con el token enviado por correo
  resetPassword: async (token, newPassword) => {
    try {
      const response = await axios.post(`${API_URL}reset-password`, { token, newPassword });
      console.log("‚úÖ Contrase√±a restablecida con √©xito:", response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå Error al restablecer la contrase√±a:", error.response?.data || error.message);
      throw error.response?.data || "Error al restablecer la contrase√±a.";
    }
  }
};

export default AuthServiceProfile;
